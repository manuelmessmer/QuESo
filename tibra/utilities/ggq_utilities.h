// Author: Manuel Me√ümer
// Email: manuel.messmer@tum.de

#ifndef GGQ_UTILITIES_INCLUDE_H
#define GGQ_UTILITIES_INCLUDE_H

#include <cstddef>
#include <cmath>
#include <vector>
#include <array>
#include <iostream>
#include <algorithm>
#include <memory>

const std::vector<std::vector<std::array<double, 2>>> S_4_0_even = {
    {   // Boundary nodes & weights
        { 0.1550510257216821, 0.3764030627004672 },
        { 0.6449489742783177, 0.5124858261884216 },
        { 1.0961818808345415, 0.4499083234521527 },
        { 1.6238181191654583, 0.5435557288354290 },
        { 2.0940680306370120, 0.4552875074262550 },
        { 2.6231733486733328, 0.5445144335521565 },
        { 3.0940054122305138, 0.4554514811675806 },
        { 3.6231543510830954, 0.5445426834712980 },
        { 4.0940035685747737, 0.4554563131231461 },
        { 4.6231537918313172, 0.5445435150954828 },
        { 5.0940035143023196, 0.4554564553669906 },
        { 5.6231537753684692, 0.5445435395762341 },
        { 6.0940035127046874, 0.4554564595542622 },
        { 6.6231537748838480, 0.5445435402968801 },
        { 7.0940035126576574, 0.4554564596775240 },
        { 7.6231537748695821, 0.5445435403180939 },
        { 8.0940035126562737, 0.4554564596811525 },
        { 8.6231537748691629, 0.5445435403187184 },
        { 9.0940035126562328, 0.4554564596812593 },
        { 9.6231537748691504, 0.5445435403187368 },
        { 10.094003512656231, 0.4554564596812625 },
        { 10.623153774869148, 0.5445435403187374 }
    },
    {   // Internal nodes & weights
        { 0.0940035126562314, 0.4554564596812625 },
        { 0.6231537748691495, 0.5445435403187374 }
    },
    {
        // Center nodes & weights
        {-0.9059964873437685, 0.4554564596812625 },
        {-0.3768462251308504, 0.5445435403187374 },
        { 0.0000000000000000, 0.2357022603955158 }
    }
};

const std::vector<std::vector<std::array<double, 2>>> S_4_0_odd = {
    {   // Boundary nodes & weights
        { 0.1550510257216821, 0.3764030627004672 },
        { 0.6449489742783177, 0.5124858261884216 },
        { 1.0961818808345415, 0.4499083234521527 },
        { 1.6238181191654583, 0.5435557288354290 },
        { 2.0940680306370120, 0.4552875074262550 },
        { 2.6231733486733328, 0.5445144335521565 },
        { 3.0940054122305138, 0.4554514811675806 },
        { 3.6231543510830954, 0.5445426834712980 },
        { 4.0940035685747737, 0.4554563131231461 },
        { 4.6231537918313172, 0.5445435150954828 },
        { 5.0940035143023196, 0.4554564553669906 },
        { 5.6231537753684692, 0.5445435395762341 },
        { 6.0940035127046874, 0.4554564595542622 },
        { 6.6231537748838480, 0.5445435402968801 },
        { 7.0940035126576574, 0.4554564596775240 },
        { 7.6231537748695821, 0.5445435403180939 },
        { 8.0940035126562737, 0.4554564596811525 },
        { 8.6231537748691629, 0.5445435403187184 },
        { 9.0940035126562328, 0.4554564596812593 },
        { 9.6231537748691504, 0.5445435403187368 },
        { 10.094003512656231, 0.4554564596812625 },
        { 10.623153774869148, 0.5445435403187374 }
    },
    {   // Internal nodes & weights
        { 0.0940035126562314, 0.4554564596812625 },
        { 0.6231537748691495, 0.5445435403187374 }
    },
    {
        // Center nodes & weights
        {-0.4375172639305899, 0.3715857551856717 },
        { 0.0000000000000000, 0.4925307500241723 }
    }
};


class GGQRule {
    typedef std::size_t SizeType;
    typedef std::vector<std::array<double,2>> IntegrationPoint1DVectorType;
    typedef std::unique_ptr<IntegrationPoint1DVectorType> IntegrationPoint1DVectorPtrType;

    public:
        GGQRule(const GGQRule &m) = delete;
        GGQRule & operator= (const GGQRule &) = delete;

        static IntegrationPoint1DVectorPtrType GetGGQ_Rule(SizeType p, SizeType r, SizeType e, double a, double b );
        //static void GetGGQ_Rule(SizeType p, SizeType r, SizeType e, double a, double b );
};

#endif
